`/*** @jsx React.DOM */`


#########
#Helper for getting user name from URL
#########
UserHelpers =
  getUserName: ->
    window.location.pathname.split('/')[1]

#########
#Single Course entry
#########
Course = React.createClass
  render: ->
    audienceItemDOM = (id) ->
      if id is "beg" then `(<span className="audience-item beg">B</span>)`
      else if id is "inter" then `(<span className="audience-item inter">I</span>)`
      else `(<span className="audience-item adv">A</span>)`

    audience = @props.course.target_audience.map (audienceItem) =>
      if audienceItem.selected
      then `(
          <li className="item">
          {audienceItemDOM(audienceItem.id)}
          </li>
        )`

    return `(
    <li className="item">
      <div className="clearfix">
        <div className="pull-left">
        <h4 className="text-charcoal item-heading display-ib">{this.props.course.name}</h4>
        <ul className="l-h-list display-ib guru-audience-list">
        {audience}
        </ul>
        </div>
        <div className="pull-right">
          <button className="btn btn-primary" >Reserve</button>
        </div>
      </div>
    </li>
    )`

#########
#Courses for guru
#########
Courses = React.createClass
  mixins: [UserHelpers],

  getInitialState: ->
    courses: []

  componentWillMount: ->
    $.getJSON '/api/public/courses', {username: @getUserName()}, (coursesRes) =>
      @setState
        courses: coursesRes

  render: ->
    courses = @state.courses.map (course) ->
      (Course {course:course})

    return `(
    <div className="schedule-container">
      <h4 className="text-heading">Now Teaching</h4>
      <ul className="list-guru-courses list-unstyled">
      {courses}
      </ul>
    </div>
    )`


#########
#Schedule for guru
#########
Schedule = React.createClass
  mixins: [UserHelpers],

  getInitialState: ->
    slots: []

  componentWillMount: ->
    $.getJSON '/api/public/schedule', {username: @getUserName()}, (slotsRes) =>
      @setState
        slots: slotsRes

  componentDidUpdate: ->
    $(@getDOMNode()).find('#calendar').fullCalendar
      header :
        left: 'prev,next today',
        center: 'title',
        right: 'month,agendaWeek,agendaDay'
    ,
      defaultView: 'agendaWeek',
      editable: false,
      events: @state.slots,
      eventClick: (e) ->
        console.log(e)

  render: ->
    return `(
      <div>
        <h4 className="text-heading">Available Slots</h4>
        <div className="schedule-container" id="calendar"></div>
      </div>
      )`

########
#YouTube widget
########

Youtube = React.createClass
  mixins: [UserHelpers]

  getInitialState: ->
    youtube: []

  componentWillMount: ->
    username = @getUserName()
    $.getJSON '/api/public/youtube', username: username, (youTubeRes) =>
      @setState
        youtube: youTubeRes

  componentDidUpdate: ->
    videoArray = @state.youtube.map (youtubeItem) ->
      if youtubeItem.enabled
      then return {
      title: youtubeItem.title
      href: "http://www.youtube.com/watch?v=#{youtubeItem.videoId}"
      type: 'text/html'
      youtube: youtubeItem.videoId
      poster: "https://img.youtube.com/vi/#{youtubeItem.videoId}/0.jpg"
      }
      else return false #set the disabled video as falsy value

    #reject the videos that have been mapped as false
    videoArray = _.reject videoArray, (videoItem) -> !videoItem

    blueimp.Gallery videoArray,
      container: '#blueimp-video-carousel'
      carousel: true

  render: ->
    `(
    <div>
    <h4 className="text-heading">On Youtube</h4>
      <div id="blueimp-video-carousel" className="blueimp-gallery blueimp-gallery-controls blueimp-gallery-carousel">
        <div className="slides"></div>
        <h3 className="title"></h3>
        <a className="prev">‹</a>
        <a className="next">›</a>
        <a className="play-pause"></a>
      </div>
    </div>
  )`


########
#SoundCloud widget
########

SoundCloud = React.createClass
  mixins: [UserHelpers]

  getInitialState: ->
    soundcloud:
      connected: false
      permalink_url: ''
      is_shown: false

  render: ->
    `(
      <div>
        <h4 className="text-heading">On SoundCloud</h4>
        <div id="embedSoundCloudWidget"></div>
      </div>
    )`

  componentWillMount: ->
    username = @getUserName()
    $.getJSON '/api/public/soundcloud', username: username , (soundCloudRes) =>
      @setState
        soundcloud: soundCloudRes

  componentDidUpdate: ->
    container = $(@getDOMNode()).find('#embedSoundCloudWidget')
    if @state.soundcloud.connected
    then SC.oEmbed @state.soundcloud.permalink_url, (embed) -> container.html(embed.html)


########
#Render the components
########

React.renderComponent (SoundCloud {}), document.getElementById('widget-soundcloud')
React.renderComponent (Youtube {}), document.getElementById('widget-youtube')
#React.renderComponent (Schedule {}), document.getElementById('widget-schedule')
React.renderComponent (Courses {}), document.getElementById('widget-courses')