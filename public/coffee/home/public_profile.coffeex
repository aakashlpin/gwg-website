`/*** @jsx React.DOM */`


#########
#Helper for getting user name from URL
#########
UserHelpers =
  getUserName: ->
    window.location.pathname.split('/')[1]

#########
#Button for Bootstrap
#########
BootstrapButton = React.createClass
  render: ->
    return `this.transferPropsTo(
      <a role="button" className="btn">
        {this.props.children}
      </a>
    );`

#########
#Bootstrap modal
#can use this for populating the schedule
#########
BootstrapModal = React.createClass
  componentDidMount: ->
    $(@getDOMNode())
    .modal
        backdrop: 'static'
        show: false
    .on 'shown.bs.modal', @handleModalShown
    .on 'hidden.bs.modal', @handleModalClose

  close: ->
    $(@getDOMNode()).modal 'hide'

  open : ->
    $(@getDOMNode()).modal 'show'

  render: ->
    confirmButton = null
    cancelButton = null

    if @props.confirm then confirmButton = `
      <BootstrapButton
        onClick={this.handleConfirm}
        className="btn-primary">
        {this.props.confirm}
      </BootstrapButton>`

    if @props.cancel then cancelButton = `
      <BootstrapButton
        onClick={this.handleCancel}>
        {this.props.cancel}
      </BootstrapButton>`

    return `(
      <div className="modal fade">
        <div className="modal-dialog modal-md">
          <div className="modal-content">
            <div className="modal-header">
              <h3 className="m-0">{this.props.title}</h3>
            </div>
            <div className="modal-body"  id={this.props.id}>
            </div>
            <div className="modal-footer">
              {cancelButton}
              {confirmButton}
            </div>
          </div>
        </div>
      </div>
    )`

  handleModalClose: ->
    $ @getDOMNode()
    .find '.modal-body'
      .empty()

  handleModalShown: ->
    @props.onShown?()

  handleCancel: ->
    @props.onCancel?()

  handleConfirm: ->
    @props.onConfirm?()


#########
#Single Course entry
#########
Course = React.createClass
  reserveSlots: ->
    $ @getDOMNode()
      .find '.has-action'
        .toggleClass 'btn-primary btn-warning'
          .find 'span'
            .html 'Reserving.. '

    @refs.modal.open()

  handleCancel: ->
    $ @getDOMNode()
    .find '.has-action'
      .toggleClass 'btn-primary btn-warning'
        .find 'span'
          .html 'Reserve '

    @refs.modal.close()

  handleModalShown: ->
    React.renderComponent (Schedule {
      classes: @props.course.classes,
      courseId: @props.course._id
    }), document.getElementById(@modalId)

  render: ->
    @modalId = "modal_#{@props.course._id}"
    modalTitle = "Reserve slots - #{@props.course.name}"

    modal = `<BootstrapModal
      ref = "modal"
      confirm = "Done"
      cancel = "Go back"
      onConfirm = {this.handleConfirm}
      onCancel = {this.handleCancel}
      onShown = {this.handleModalShown}
      title = {modalTitle}
      id = {this.modalId}>
      </BootstrapModal>`

    audienceItemDOM = (id) ->
      if id is "beg" then `(<span className="audience-item beg" title="Level: Beginner">B</span>)`
      else if id is "inter" then `(<span className="audience-item inter" title="Level: Intermediate">I</span>)`
      else `(<span className="audience-item adv" title="Level: Advanced">A</span>)`

    audience = @props.course.target_audience.map (audienceItem) =>
      if audienceItem.selected
      then `(
        <li className="item">
        {audienceItemDOM(audienceItem.id)}
        </li>
    )`

    return `(
      <li className="item">
        <div className="clearfix">
          <div className="pull-left">
            <h4 className="item-heading display-ib">{this.props.course.name}</h4>
            <ul className="l-h-list display-ib guru-audience-list">
              {audience}
            </ul>
            <div>
              <h5 className="text-charcoal">Sessions: <strong>{this.props.course.classes}</strong>
              | Fee :  <strong><i className="fa fa-rupee"></i> {this.props.course.fee}</strong>
              </h5>
            </div>
          </div>
          <div className="pull-right">
            <button ref="reserveBtn" className="btn btn-primary has-action" onClick={this.reserveSlots}>
              <span>Reserve </span><i className="fa fa-headphones"></i>
            </button>
          </div>
        </div>
        {modal}
      </li>
    )`

#########
#Courses for guru
#########
Courses = React.createClass
  mixins: [UserHelpers],

  getInitialState: ->
    courses: []

  componentWillMount: ->
    $.getJSON '/api/public/courses', {username: @getUserName()}, (coursesRes) =>
      @setState
        courses: coursesRes

  render: ->
    courses = @state.courses.map (course) ->
      (Course {course:course})

    return `(
    <div className="schedule-container">
      <h4 className="text-heading">Learn</h4>
      <ul className="list-guru-courses list-unstyled">
      {courses}
      </ul>
    </div>
    )`

#########
#Schedule for guru
#########
Schedule = React.createClass
  mixins: [UserHelpers],

  getDefaultProps: ->
    selectedClasses: 0

  getInitialState: ->
    slots: []

  componentWillMount: ->
    $.getJSON '/api/public/schedule', {username: @getUserName()}, (slotsRes) =>
      @setState
        slots: slotsRes

  componentDidUpdate: ->
    calendarElem = $(@getDOMNode()).find('.schedule-calendar')
    calendarElem.fullCalendar
      header :
        left: 'prev,next today',
        center: 'title',
        right: 'month,agendaWeek,agendaDay'
      defaultView : 'month'
      editable : false
      events : @state.slots
      eventClick : (event) =>
        shouldUpdate = true

        if event.title is 'Available'
          if @props.selectedClasses isnt @props.classes
            event.title = 'Selected'
            event.color = '#e67e22'
            @props.selectedClasses += 1

          else
            shouldUpdate = false
            noty layout: 'topCenter', text: "Max classes chosen. Save and proceed", timeout: 2500, type: 'warning', killer: true

        else
          event.title = 'Available'
          event.color = '#3a87ad'
          @props.selectedClasses -= 1

        if shouldUpdate
          $(@getDOMNode()).find('.schedule-classes').html @props.selectedClasses
          calendarElem.fullCalendar 'updateEvent', event

  render: ->
    @scheduleMessageId = "schedule-messages_#{@props.courseId}"
    return `(
      <div>
        <h5>
          Selected
          <span className="schedule-classes">{this.props.selectedClasses}</span>
          of
          {this.props.classes}
        </h5>
        <div className="schedule-calendar"></div>
      </div>
      )`

########
#YouTube widget
########

Youtube = React.createClass
  mixins: [UserHelpers]

  getInitialState: ->
    youtube: []

  componentWillMount: ->
    username = @getUserName()
    $.getJSON '/api/public/youtube', username: username, (youTubeRes) =>
      @setState
        youtube: youTubeRes

  componentDidUpdate: ->
    videoArray = @state.youtube.map (youtubeItem) ->
      if youtubeItem.enabled
      then return {
      title: youtubeItem.title
      href: "http://www.youtube.com/watch?v=#{youtubeItem.videoId}"
      type: 'text/html'
      youtube: youtubeItem.videoId
      poster: "https://img.youtube.com/vi/#{youtubeItem.videoId}/0.jpg"
      }
      else return false #set the disabled video as falsy value

    #reject the videos that have been mapped as false
    videoArray = _.reject videoArray, (videoItem) -> !videoItem

    blueimp.Gallery videoArray,
      container: '#blueimp-video-carousel'
      carousel: true

  render: ->
    `(
    <div>
    <h3 className="text-heading text-center mb-30">On Youtube</h3>
      <div id="blueimp-video-carousel" className="blueimp-gallery blueimp-gallery-controls blueimp-gallery-carousel">
        <div className="slides"></div>
        <h3 className="title"></h3>
        <a className="prev">‹</a>
        <a className="next">›</a>
        <a className="play-pause"></a>
      </div>
    </div>
  )`


########
#SoundCloud widget
########

SoundCloud = React.createClass
  mixins: [UserHelpers]

  getInitialState: ->
    soundcloud:
      connected: false
      permalink_url: ''
      is_shown: false

  render: ->
    `(
      <div>
        <h3 className="text-heading text-center mb-30">On SoundCloud</h3>
        <div id="embedSoundCloudWidget"></div>
      </div>
    )`

  componentWillMount: ->
    username = @getUserName()
    $.getJSON '/api/public/soundcloud', username: username , (soundCloudRes) =>
      @setState
        soundcloud: soundCloudRes

  componentDidUpdate: ->
    container = $(@getDOMNode()).find('#embedSoundCloudWidget')
    if @state.soundcloud.connected
#    then SC.oEmbed @state.soundcloud.permalink_url, (embed) -> container.html(embed.html)
    then SC.oEmbed "https://soundcloud.com/mad-orange-fireworks", (embed) -> container.html(embed.html)


########
#Render the components
########

React.renderComponent (SoundCloud {}), document.getElementById('widget-soundcloud')
React.renderComponent (Youtube {}), document.getElementById('widget-youtube')
React.renderComponent (Courses {}), document.getElementById('widget-courses')
